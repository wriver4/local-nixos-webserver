#!/usr/bin/env bash

# Safe NixOS Web Server Installation with Comprehensive Tree Analysis
# This script thoroughly analyzes the entire configuration tree before making any changes

set -e  # Exit on any error

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NIXOS_CONFIG_DIR="/etc/nixos"
BACKUP_DIR="/etc/nixos/webserver-backups/$(date +%Y%m%d-%H%M%S)"
WEB_ROOT="/var/www"
ANALYSIS_REPORT=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

critical() {
    echo -e "${RED}🚨 CRITICAL: $1${NC}"
}

info() {
    echo -e "${PURPLE}ℹ️  $1${NC}"
}

# Check privileges
check_privileges() {
    if [[ $EUID -eq 0 ]]; then
        SUDO_CMD=""
        success "Running as root"
    else
        if ! command -v sudo &> /dev/null; then
            error "This script requires root privileges or sudo access."
        fi
        
        if ! sudo -n true 2>/dev/null; then
            log "This script requires sudo access. You may be prompted for your password."
            if ! sudo -v; then
                error "Failed to obtain sudo privileges"
            fi
        fi
        SUDO_CMD="sudo"
        success "Sudo access confirmed"
    fi
}

# Run comprehensive configuration analysis
run_configuration_analysis() {
    log "Running comprehensive configuration tree analysis..."
    
    if [[ ! -f "$SCRIPT_DIR/enhanced-install-analyzer.sh" ]]; then
        error "Configuration analyzer not found. Please ensure enhanced-install-analyzer.sh is present."
    fi
    
    # Run the analyzer and capture the report location
    local analyzer_output=$("$SCRIPT_DIR/enhanced-install-analyzer.sh" 2>&1)
    ANALYSIS_REPORT=$(echo "$analyzer_output" | grep "Full analysis report saved to:" | sed 's/.*saved to: //')
    
    if [[ ! -f "$ANALYSIS_REPORT" ]]; then
        error "Failed to generate analysis report"
    fi
    
    success "Configuration analysis complete"
    
    # Check for critical issues
    local criticals=$(grep "🚨 CRITICAL:" "$ANALYSIS_REPORT" | wc -l)
    local conflicts=$(grep "CONFLICT:" "$ANALYSIS_REPORT" | wc -l)
    
    if [[ $criticals -gt 0 ]]; then
        critical "Found $criticals critical issues in configuration"
        echo "Critical issues found:"
        grep "🚨 CRITICAL:" "$ANALYSIS_REPORT" | sed 's/🚨 CRITICAL: /  - /'
        echo ""
        read -p "Continue despite critical issues? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            error "Installation cancelled due to critical issues"
        fi
    fi
    
    if [[ $conflicts -gt 0 ]]; then
        warning "Found $conflicts potential conflicts"
        echo "Conflicts detected:"
        grep "CONFLICT:" "$ANALYSIS_REPORT" | sed 's/CONFLICT: /  - /'
        echo ""
        echo "These conflicts will be addressed during installation."
    fi
}

# Generate conflict-aware web server module
generate_conflict_aware_module() {
    log "Generating conflict-aware web server module..."
    
    local use_mkdefault=""
    local mysql_conflicts=""
    local nginx_conflicts=""
    
    # Check analysis report for conflicts
    if [[ -f "$ANALYSIS_REPORT" ]]; then
        if grep -q "CONFLICT: MySQL" "$ANALYSIS_REPORT"; then
            mysql_conflicts="true"
            use_mkdefault="true"
            warning "MySQL conflicts detected - using lib.mkDefault for package"
        fi
        
        if grep -q "CONFLICT: Nginx" "$ANALYSIS_REPORT"; then
            nginx_conflicts="true"
            warning "Nginx conflicts detected - will merge configurations"
        fi
    fi
    
    # Generate module with appropriate conflict resolution
    sudo tee "$NIXOS_CONFIG_DIR/webserver-safe.nix" > /dev/null << EOF
# Safe Web Server Configuration Module with Conflict Resolution
# Generated by Safe NixOS Web Server Installation Script
# Analysis Report: $ANALYSIS_REPORT

{ config, pkgs, lib, ... }:

{
  # System packages for web development (NixOS 25.05: 'php' = PHP 8.4)
  environment.systemPackages = with pkgs; [
    mysql80
    tree
    htop
    php  # In NixOS 25.05, 'php' = PHP 8.4
  ];

  # Enable services
  services.openssh.enable = true;
  
$(if [[ "$mysql_conflicts" == "true" ]]; then
cat << 'MYSQL_CONFLICT'
  # MySQL/MariaDB configuration with conflict resolution
  services.mysql = {
    enable = lib.mkDefault true;
    package = lib.mkDefault pkgs.mariadb;  # Use mkDefault to allow override
    initialDatabases = lib.mkDefault [
      { name = "dashboard_db"; }
      { name = "sample1_db"; }
      { name = "sample2_db"; }
      { name = "sample3_db"; }
    ];
    initialScript = lib.mkDefault (pkgs.writeText "mysql-init.sql" ''
      CREATE USER IF NOT EXISTS 'webuser'@'localhost' IDENTIFIED BY 'webpass123';
      GRANT ALL PRIVILEGES ON dashboard_db.* TO 'webuser'@'localhost';
      GRANT ALL PRIVILEGES ON sample1_db.* TO 'webuser'@'localhost';
      GRANT ALL PRIVILEGES ON sample2_db.* TO 'webuser'@'localhost';
      GRANT ALL PRIVILEGES ON sample3_db.* TO 'webuser'@'localhost';
      
      CREATE USER IF NOT EXISTS 'phpmyadmin'@'localhost' IDENTIFIED BY 'pmapass123';
      GRANT ALL PRIVILEGES ON *.* TO 'phpmyadmin'@'localhost' WITH GRANT OPTION;
      
      FLUSH PRIVILEGES;
    '');
  };
MYSQL_CONFLICT
else
cat << 'MYSQL_NORMAL'
  # MySQL/MariaDB configuration
  services.mysql = {
    enable = true;
    package = pkgs.mariadb;
    initialDatabases = [
      { name = "dashboard_db"; }
      { name = "sample1_db"; }
      { name = "sample2_db"; }
      { name = "sample3_db"; }
    ];
    initialScript = pkgs.writeText "mysql-init.sql" ''
      CREATE USER IF NOT EXISTS 'webuser'@'localhost' IDENTIFIED BY 'webpass123';
      GRANT ALL PRIVILEGES ON dashboard_db.* TO 'webuser'@'localhost';
      GRANT ALL PRIVILEGES ON sample1_db.* TO 'webuser'@'localhost';
      GRANT ALL PRIVILEGES ON sample2_db.* TO 'webuser'@'localhost';
      GRANT ALL PRIVILEGES ON sample3_db.* TO 'webuser'@'localhost';
      
      CREATE USER IF NOT EXISTS 'phpmyadmin'@'localhost' IDENTIFIED BY 'pmapass123';
      GRANT ALL PRIVILEGES ON *.* TO 'phpmyadmin'@'localhost' WITH GRANT OPTION;
      
      FLUSH PRIVILEGES;
    '';
  };
MYSQL_NORMAL
fi)

  # PHP-FPM configuration with PHP 8.4
  services.phpfpm = {
    pools.www = {
      user = "nginx";
      group = "nginx";
      settings = {
        "listen.owner" = "nginx";
        "listen.group" = "nginx";
        "listen.mode" = "0600";
        "pm" = "dynamic";
        "pm.max_children" = 75;
        "pm.start_servers" = 10;
        "pm.min_spare_servers" = 5;
        "pm.max_spare_servers" = 20;
        "pm.max_requests" = 500;
      };
      phpPackage = pkgs.php.buildEnv {
        extensions = ({ enabled, all }: enabled ++ (with pkgs.php84Extensions; [
          mysqli
          pdo_mysql
          mbstring
          zip
          gd
          curl
          json
          session
          filter
          openssl
          fileinfo
          intl
          exif
        ]));
        extraConfig = ''
          memory_limit = 256M
          upload_max_filesize = 64M
          post_max_size = 64M
          max_execution_time = 300
          max_input_vars = 3000
          date.timezone = UTC
          
          ; PHP 8.4 optimizations
          opcache.enable = 1
          opcache.memory_consumption = 128
          opcache.interned_strings_buffer = 8
          opcache.max_accelerated_files = 4000
          opcache.revalidate_freq = 2
          opcache.fast_shutdown = 1
          
          ; Security settings
          expose_php = Off
          display_errors = Off
          log_errors = On
          error_log = /var/log/php_errors.log
        '';
      };
    };
  };

$(if [[ "$nginx_conflicts" == "true" ]]; then
cat << 'NGINX_CONFLICT'
  # Nginx configuration with conflict-aware virtual hosts
  services.nginx = {
    enable = lib.mkDefault true;
    user = lib.mkDefault "nginx";
    group = lib.mkDefault "nginx";
    
    # Global configuration
    appendConfig = lib.mkDefault ''
      worker_processes auto;
      worker_connections 1024;
    '';

    # Common configuration for PHP
    commonHttpConfig = lib.mkDefault ''
      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;
      client_max_body_size 64M;
      
      gzip on;
      gzip_vary on;
      gzip_min_length 1024;
      gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
      
      # Security headers
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
    '';

    # Virtual hosts - these will merge with existing configurations
    virtualHosts = lib.mkMerge [
NGINX_CONFLICT
else
cat << 'NGINX_NORMAL'
  # Nginx configuration
  services.nginx = {
    enable = true;
    user = "nginx";
    group = "nginx";
    
    # Global configuration
    appendConfig = ''
      worker_processes auto;
      worker_connections 1024;
    '';

    # Common configuration for PHP
    commonHttpConfig = ''
      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;
      client_max_body_size 64M;
      
      gzip on;
      gzip_vary on;
      gzip_min_length 1024;
      gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
      
      # Security headers
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
    '';

    virtualHosts = {
NGINX_NORMAL
fi)
      # Dashboard
      "dashboard.local" = {
        root = "/var/www/dashboard";
        locations = {
          "/" = {
            tryFiles = "\$uri \$uri/ /index.php?\$query_string";
            index = "index.php index.html";
          };
          "~ \\.php\$" = {
            extraConfig = ''
              fastcgi_pass unix:\${config.services.phpfpm.pools.www.socket};
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
              fastcgi_param PHP_VALUE "auto_prepend_file=none";
              fastcgi_read_timeout 300;
              include \${pkgs.nginx}/conf/fastcgi_params;
            '';
          };
          "~ /\\.ht" = {
            extraConfig = "deny all;";
          };
        };
      };

      # phpMyAdmin
      "phpmyadmin.local" = {
        root = "/var/www/phpmyadmin";
        locations = {
          "/" = {
            tryFiles = "\$uri \$uri/ /index.php?\$query_string";
            index = "index.php";
          };
          "~ \\.php\$" = {
            extraConfig = ''
              fastcgi_pass unix:\${config.services.phpfpm.pools.www.socket};
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
              fastcgi_param PHP_VALUE "auto_prepend_file=none";
              fastcgi_read_timeout 300;
              include \${pkgs.nginx}/conf/fastcgi_params;
            '';
          };
          "~ /\\.ht" = {
            extraConfig = "deny all;";
          };
        };
      };

      # Sample Domain 1
      "sample1.local" = {
        root = "/var/www/sample1";
        locations = {
          "/" = {
            tryFiles = "\$uri \$uri/ /index.php?\$query_string";
            index = "index.php index.html";
          };
          "~ \\.php\$" = {
            extraConfig = ''
              fastcgi_pass unix:\${config.services.phpfpm.pools.www.socket};
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
              fastcgi_param PHP_VALUE "auto_prepend_file=none";
              fastcgi_read_timeout 300;
              include \${pkgs.nginx}/conf/fastcgi_params;
            '';
          };
          "~ /\\.ht" = {
            extraConfig = "deny all;";
          };
        };
      };

      # Sample Domain 2
      "sample2.local" = {
        root = "/var/www/sample2";
        locations = {
          "/" = {
            tryFiles = "\$uri \$uri/ /index.php?\$query_string";
            index = "index.php index.html";
          };
          "~ \\.php\$" = {
            extraConfig = ''
              fastcgi_pass unix:\${config.services.phpfpm.pools.www.socket};
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
              fastcgi_param PHP_VALUE "auto_prepend_file=none";
              fastcgi_read_timeout 300;
              include \${pkgs.nginx}/conf/fastcgi_params;
            '';
          };
          "~ /\\.ht" = {
            extraConfig = "deny all;";
          };
        };
      };

      # Sample Domain 3
      "sample3.local" = {
        root = "/var/www/sample3";
        locations = {
          "/" = {
            tryFiles = "\$uri \$uri/ /index.php?\$query_string";
            index = "index.php index.html";
          };
          "~ \\.php\$" = {
            extraConfig = ''
              fastcgi_pass unix:\${config.services.phpfpm.pools.www.socket};
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
              fastcgi_param PHP_VALUE "auto_prepend_file=none";
              fastcgi_read_timeout 300;
              include \${pkgs.nginx}/conf/fastcgi_params;
            '';
          };
          "~ /\\.ht" = {
            extraConfig = "deny all;";
          };
        };
      };
$(if [[ "$nginx_conflicts" == "true" ]]; then
echo "    }];"
else
echo "    };"
fi)
  };

  # Firewall configuration - merge with existing
  networking.firewall.allowedTCPPorts = lib.mkAfter [ 80 443 3306 ];

  # System activation script to create directories and files
  system.activationScripts.websetup = ''
    # Create web directories
    mkdir -p /var/www/{dashboard,phpmyadmin,sample1,sample2,sample3}
    chown -R nginx:nginx /var/www
    chmod -R 755 /var/www
    
    # Create PHP error log directory
    mkdir -p /var/log
    touch /var/log/php_errors.log
    chown nginx:nginx /var/log/php_errors.log
    chmod 644 /var/log/php_errors.log
  '';
}
EOF

    success "Conflict-aware web server module generated"
    
    if [[ "$use_mkdefault" == "true" ]]; then
        info "Used lib.mkDefault for conflicting services - they can be overridden"
    fi
}

# Create backup
create_backup() {
    log "Creating comprehensive backup..."
    
    sudo mkdir -p "$BACKUP_DIR"
    sudo cp -r "$NIXOS_CONFIG_DIR"/* "$BACKUP_DIR/" 2>/dev/null || true
    
    # Copy analysis report to backup
    if [[ -f "$ANALYSIS_REPORT" ]]; then
        sudo cp "$ANALYSIS_REPORT" "$BACKUP_DIR/analysis-report.txt"
    fi
    
    # Create restore script
    sudo tee "$BACKUP_DIR/restore.sh" > /dev/null << EOF
#!/bin/bash
# Restore script created on $(date)
# Analysis report: $ANALYSIS_REPORT
echo "Restoring NixOS configuration from backup..."
sudo cp -r "$BACKUP_DIR"/* "$NIXOS_CONFIG_DIR/"
sudo rm "$NIXOS_CONFIG_DIR/restore.sh"
sudo rm "$NIXOS_CONFIG_DIR/analysis-report.txt" 2>/dev/null || true
echo "Configuration restored. Run 'sudo nixos-rebuild switch' to apply."
EOF
    
    sudo chmod +x "$BACKUP_DIR/restore.sh"
    success "Backup created at: $BACKUP_DIR"
}

# Test configuration before applying
test_configuration() {
    log "Testing configuration syntax..."
    
    if sudo nixos-rebuild dry-build &>/dev/null; then
        success "Configuration syntax is valid"
    else
        error "Configuration syntax error detected. Check the configuration manually."
    fi
}

# Main installation function
main() {
    echo "🛡️  Safe NixOS Web Server Installation with Tree Analysis"
    echo "========================================================"
    echo ""
    
    check_privileges
    
    echo "This installation will:"
    echo "  • Analyze your entire NixOS configuration tree"
    echo "  • Detect conflicts and generate appropriate solutions"
    echo "  • Create conflict-aware web server configuration"
    echo "  • Use lib.mkDefault and lib.mkMerge for safe integration"
    echo "  • Create comprehensive backups with analysis reports"
    echo ""
    
    read -p "Proceed with safe installation? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        error "Installation cancelled by user"
    fi
    
    run_configuration_analysis
    create_backup
    generate_conflict_aware_module
    test_configuration
    
    echo ""
    success "Safe installation preparation complete!"
    echo ""
    echo "🎯 Next steps:"
    echo "1. Review the analysis report: $ANALYSIS_REPORT"
    echo "2. Import the safe module in your configuration:"
    echo "   imports = [ ./webserver-safe.nix ];"
    echo "3. Add networking.hosts to your host configuration (see analysis)"
    echo "4. Run: sudo nixos-rebuild switch"
    echo ""
    echo "📦 Backup location: $BACKUP_DIR"
    echo "   • Contains analysis report and restore script"
    echo ""
    warning "The module uses lib.mkDefault and lib.mkMerge for safe integration"
    info "Review conflicts in the analysis report before rebuilding"
}

# Run main function
main "$@"